

package org.usfirst.frc.team1758.robot;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;
    SendableChooser chooser;
    LiveWindow lw;
    int autoLoopCounter = 0;
    Victor leftChannel; // Controls movement for left
    Victor rightChannel; // Controls movement for right
    Talon liftDriveL; // lifts claw L
    Talon liftDriveR; // lifts claw R
    Talon liftContainer; // lifts container
    RobotDrive technoDrive; // robot movement
    Joystick gamePad1; // joystick control
    Joystick gamePad2; // joystick control
    Solenoid m_solenoid; // pistons go off
    DoubleSolenoid m_Tim; // directs arm
    DoubleSolenoid m_Arm; // moves the arm
    DigitalInput m_limitSw1; //
    DigitalInput m_limitSw2; //
    Gyro gyro; // all of the controls
    com.sun.xml.internal.fastinfoset.Encoder m_liftLeft; // direction for arm to go left
    com.sun.xml.internal.fastinfoset.Encoder m_liftRight; // direction for arm to go left
    com.sun.xml.internal.fastinfoset.Encoder m_liftCont; // arm stays in its original position
    Timer timerA;
    Timer timerB;
 
    static double kp = 0.03;
    static int kSolenoidButton = 9;
    static int XB_A = 1;
    static int XB_B = 2;
    static int XB_X = 3;
    static int XB_Y = 4;
    static int XB_LeftBumper = 5;
    static int XB_RightBumper = 6;
    static int XB_Back = 7;
    static int XB_Start = 8;
    static int XB_LeftAnalog_Pressed = 9;
    static int XB_RightAnalog_Pressed = 10;

//	int ls1 = 0;
//	int ls2 = 0;

    static int XB_Left_Analog_Y = 1;
    static int XB_Left_Analog_X = 2;
    static int XB_Trigger = 3;
    static int XB_Right_Analog_X = 4;
    static int XB_Right_Analog_Y = 5;;
   
    
     // This function is run when the robot is first started up and should be
     // used for any initialization code.
     //
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
    }
    
	private Gyro Gyro(int i) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	switch(autoSelected) {
    	case customAuto:
        //Put custom auto code here   
            break;
    	case defaultAuto:
    	default:
    	//Put default auto code here
            break;
    	}
    }
    float threshholdValue(float value, float thresh)
    {
    	if (value > 0.0 && value < thresh)
    		{return 0;}
    	else if (value < 0.0 && value > -thresh)
    		{return 0;}
    	else 
    		{return thresh;}
    }
    @SuppressWarnings("deprecation")
	void ChainGoUpandDownTeleop()
    {
    if(gamePad2.getRawButton(XB_RightBumper))
    		{
    	//Chains go up

		//Set(speed, 0)

		if (m_liftLeft.get() <290)
			liftDriveL.set(.35, (byte) 0);
		}
		if (m_liftRight.get()< 290){
			liftDriveR.set(-.35 , (byte) 0);
		}

	if(gamePad2.getRawButton(XB_LeftBumper)){	//Chains go down
		if (m_liftLeft.get() > 0){
			liftDriveL.set(-0.30,(byte) 0);
		}
		if (m_liftRight.get() > 0){
			liftDriveR.set(0.30,(byte) 0);
		}
	}
	else{
		liftDriveL.set(0,(byte)0);
		liftDriveR.set(0,(byte)0);
	}
}

    

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        //Arcade Drive
    		forwardValue = threshholdValue(gamepad1.getRawAxis(XB_Left_Analog_Y), 0.2);
    		rotateValue = threshholdValue(gamepad1.getRawAxis(XB_Left_Analog_X),0.2);
    		technoDrive.ArcadeDrive(forwardValue,rotateValue);
    	//Tank Drive
    		leftValue = thresholdValue(gamepad1.getRawAxis(XB_Left_Analog_Y), 0.2);
    		rightValue = thresholdValue(gamePad1.getRawAxis(XB_Right_Analog_Y), 0.2);
    		technoDrive.TankDrive(leftValue, rightValue);
    		
    	//Mecanum Drive

    		forwardValue = thresholdValue(gamePad1.getRawAxis(XB_Left_Analog_Y), 0.2);
    		strafeValue = thresholdValue(gamePad1.getRawAxis(XB_Left_Analog_Y), 0.2);
    		rotateValue = thresholdValue(gamePad1.getRawAxis(XB_Trigger), 0.2);
    		technoDrive.MecanumDrive_Cartesian(strafeValue, forwardValue, rotateValue, 0.0);
    
    
    		if (gamePad2.getRawButton(XB_RightAnalog_Pressed)){
    			m_liftLeft.reset();
    			m_liftRight.reset();
    			m_liftCont.reset();
    			/*************************** Solenoids ***********************/
    			if(gamepad2.getRawButton(XB_A))
    			{
    				solenoid_Centering.set(true);
    			} else if (gamePad2.getRawButton(XB_Y))
    			{
    				solenoid_Centering.set(false);
    			} else
    			{
    				solenoid_Centering.set(false);
    			}
    			if(gamepad1.getRawButton(XB_B))
    			{
    				doubleSolenoid_Hold.set(DoubleSolenoid::kForward);
    			}else if (gamepad2.getRawButton(XB_X))
    			{
    				doubleSolenoid_Hold.set(DoubleSolenoid::kReverse);
    			} else
    			{
    				doubleSolenoid_Hold.set(DoubleSolenoid::kOff);
    			}
    			if (gamePad2.getRawButton(XB_Start)){
    				liftContainer.set(-1,0);
    			}
    			else if (gamePad2.getRawButton(XB_Back)){
    				liftContainer.set(0.6,0);
    			}
    			else{
    				liftContainer.set(0,0);
    			}
    		}


    		}
    
    
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    // lw.run();
    }
    
}
